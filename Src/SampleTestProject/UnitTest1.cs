// ***********************************************************************
// Assembly         : SampleTestProject
// Author           : Walter Verhoeven
// Created          : Mon 19-Aug-2024
//
// Last Modified By : Walter Verhoeven
// Last Modified On : Mon 19-Aug-2024
// ***********************************************************************
// <copyright file="UnitTest1.cs" company="SampleTestProject">
//     Copyright (c) VESNX SA. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

using LogLevel = Microsoft.Extensions.Logging.LogLevel;

namespace SampleTestProject;


/// <summary>
/// Defines test class UnitTest1 with some sample test methods.
/// </summary>
[TestClass]
public class UnitTest1
{
    private static ServiceProvider? _serviceProvider;

    /// <summary>
    /// this method will get the Test Context from from the framework and will be used to log to
    /// </summary>
    /// <param name="context">The context.</param>
    [ClassInitialize]
    public static void ClassInitialize(TestContext context)
    {
        _serviceProvider = new ServiceCollection()
                                .AddMsUnitTestLogger(context, LogLevel.Error)
                                .BuildServiceProvider();

    }

    /// <summary>
    /// the cleanup method will release the service provider after all tests have compleated.
    /// </summary>
    [ClassCleanup]
    public static void ClassCleanup()
    {
        _serviceProvider?.Dispose();
    }


    /// <summary>
    /// Defines the test method TestMethod1 and showcases the output generated by the logger
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(System.IO.DirectoryNotFoundException))]
    public void TestMethod1()
    {
        if (_serviceProvider is null) Assert.Fail("Class setup failed");

        // Get non-generic ILogger
        var logger = _serviceProvider.GetRequiredService<ILogger>();
        logger.LogInformation("This is a non-generic test log message.");

        // Get generic ILogger<>
        var genericLogger = _serviceProvider.GetRequiredService<ILogger<UnitTest1>>();
        genericLogger.LogInformation("This is a generic test log message.");

        try
        {
            var willFail = File.Open("x:\\dirNotfound\\and\\file\\doesNotExist.txt", FileMode.Open, FileAccess.Read);
        }
        catch (Exception ex)
        {
            //extension from the walter nuget package and will generate a trace
            //if the test is AoT compiled as MS doesn't support trace in AoT
            genericLogger.LogException(ex);
            throw;
        }
    }
}

